@Logic
script Shop extends Logic

	@ExecSpace("Server")
	method void Buy(string itemId, integer itemCount)
		-- Buy the items corresponding to the itemId by itemCount and subtract mesos.
		
		    local itemInfo = _Data.ItemTable[itemId]
		
		    if itemInfo == nil then
		    	log_error("[Shop] (Buy) Item Id Error: " .. itemId)
		    	return
		    end
		
		    local totalPrice = itemInfo.Price * itemCount
		
		
		    local customerUserId = senderUserId
		    local user = _UserService:GetUserEntityByUserId(customerUserId)
		    local inventory = user.SimpleInventory
		    local currMeso = inventory.Meso
		
		    if inventory:HasSpaceFor(itemId, itemCount) == false then
		    	log_error("[Shop] (Buy) Not enough space in Inventory.")
		    	return
		    end
		
		    if currMeso < totalPrice then
		    	log ("[Shop] (Buy) Not enough mesos.")
		    	return
		    end
		
		    inventory:SetMeso(currMeso - totalPrice)
		    inventory:AddItem(itemId, itemCount)
	end

	@ExecSpace("Server")
	method void Sell(integer inventorySlotIndex, integer itemCount)
		-- Sell the inventory item in the inventorySlotIndex by itemCount and acquire mesos.
		    -- When selling, sell the item for half the purchase price.
		
		    local customerUserId = senderUserId
		    local user = _UserService:GetUserEntityByUserId(customerUserId)
		    local inventory = user.SimpleInventory
		
		    ---@type ItemStack
		    local itemStack = inventory.ItemStacks[inventorySlotIndex]
		
		    if itemStack == nil then
		    	log_error("[Shop] (Sell) Item is not valid.")
		    	return
		    end
		
		    if itemStack.Count < itemCount then
		    	log_error("[Shop] (Sell) There aren't enough items.")
		    	return
		    end
		
		    ---@type ItemInfo
		    local itemInfo = _Data.ItemTable[itemStack.ItemId]
		    local totalPrice = math.floor(itemInfo.Price * 0.5) * itemCount
		    local currMeso = inventory.Meso
		
		    inventory:SetMeso(currMeso + totalPrice)
		    inventory:RemoveItemAt(inventorySlotIndex, itemCount)
	end

end